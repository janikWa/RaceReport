---
title: "RaceReport"
title-block-banner: "images/banner_red.jpg"
format:
  html:
    page-layout: full
    embed-resources: true
    grid:
      body-width: 1200px
      sidebar-width: 400px
echo: false
toc: true
jupyter: python3
---
```{python}
#| echo: false
from dataservice import DataService
from IPython.display import Markdown, display
import pandas as pd 
import seaborn as sns 
import matplotlib.pyplot as plt 
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px 
import papermill
```


```{python}
#| tags: [parameters]

source = "https://my.raceresult.com/309137/#3_EFFC53"

name = "Winterlaufserie Rheinzabern - 15km"

```


```{python}
#| echo: false
#| output: false
obj = DataService() 
data = obj.scrape_data(source)
```

# `{python} name`

## üìÖ `{python} obj.date` \|üìç `{python} obj.location`

## 

# Ergebnisliste 

```{python}
#make table 

cols_to_show = [col for col in data.columns if col not in ['datetime', 'time_delta', 'time_minutes', 'AK', 'M/W', 'Age','AG_numeric']]

table = go.Figure(
    data=[
        go.Table(
            header=dict(
                values=cols_to_show, 
                fill_color="#b81212",
                font=dict(size=15, color="white"), 
                align="center"
            ),
            cells=dict(
                values=[data[col].tolist() for col in cols_to_show],
                font=dict(size=12),
                fill_color="white", 
                line_color="#b81212",
                align="center"
            ),
        )
    ]
)

table.update_layout(margin=dict(b=40))
table.show()

```

# Demografiedaten 

::::: {layout = "[35, 65]"}

::: {#firstcolumn}

```{python}

gender_counts = data['M/W'].value_counts()


# Assuming 'gender_counts' is already calculated (counts of 'M' and 'W')
fig = px.pie(
    names=gender_counts.index,  # The categories (M and W)
    values=gender_counts.values,  # The count of each category
    title="Verh√§ltnis M/W",  # Title of the pie chart
    color=gender_counts.index,  # Color by gender categories (M and W)
    color_discrete_map={"M": "#b81212", "W": "#ffffff"}
)

fig.update_layout(
    title_font=dict(size=20, family="Arial", color="black"), 
)

# Add a red border around the white sector (Female category)
fig.update_traces(
     hovertemplate="<b>Geschlecht: </b> %{label}<br>" +  # Display M/W category
                  "<b>Teilnehmer:</b> %{value} <extra></extra>",  # Display the count value
    marker=dict(
        line=dict(
            color="#b81212",  # Red color for the border
            width=1  # Set the width of the border
        )
    ), 
    opacity = 0.8
)




# Show the pie chart
fig.show()

```

:::

::: {#seccondcolumn}

```{python}
obj.sort_df_by_ag()
data = obj.dataFrame

fig = px.histogram(
    data,
    x="AK", 
    title = "Teilnehmer pro Altersklasse", 
    color_discrete_sequence=["#b81212"]
    
)

fig.update_layout(
    title_font=dict(size=20, family="Arial", color="black"),  # Title font style
    xaxis_title = "Altersklasse", 
    yaxis_title = "Teilnehmer",
    xaxis=dict(showgrid=True, gridcolor="lightgray"),  # Add gridlines
    yaxis=dict(showgrid=True, gridcolor="lightgray"),
    plot_bgcolor="white",  # Background color# Gap between bars
)

fig.update_traces(
    marker=dict(
        line=dict(width=1, color="black")  # Add border to bars
    ),
    opacity=0.8, 
    hovertemplate="<b>AK:</b> %{x}<br>" +  # Customize hover text
              "<b>Teilnehmer:</b> %{y}<extra></extra>" 
)


# Show the pie chart
fig.show()

```

:::
:::::

# Race Insights

::::: {layout = "[65, 35]"}

::: {#firstcolumn}
```{python}
import plotly.express as px

# Create the histogram
fig = px.histogram(
    data, 
    x="datetime", 
    nbins=80, 
    title="Verteilung der Rennzeiten",  # Add a title
    color_discrete_sequence=["#b81212"] # Custom color
)

# Customize layout
fig.update_layout(
    title_font=dict(size=20, family="Arial", color="black"),  # Title font style
    xaxis_title = "Zeit", 
    yaxis_title = "Anzahl",
    xaxis=dict(showgrid=True, gridcolor="lightgray"),  # Add gridlines
    yaxis=dict(showgrid=True, gridcolor="lightgray"),
    plot_bgcolor="white",  # Background color
    bargap=0.2,  # Gap between bars
    xaxis_tickformat = "%H:%M:%S"
)


# Customize bars
fig.update_traces(
    marker=dict(
        line=dict(width=1, color="black")  # Add border to bars
    ),
    opacity=0.8, 
    hovertemplate="<b>Zeit in Minuten:</b> %{x}<br>" +  # Customize hover text
              "<b>Anzahl:</b> %{y}<extra></extra>" 
)

# Show the plot
fig.show()

```

:::

::: {#seccondcolumn}

```{python}

boxplot_race_time = px.box(
  data, 
  y = "datetime", 
  title = "Boxplot der Rennzeiten", 
  color_discrete_sequence=["#b81212"]  
)

# Customize layout
boxplot_race_time.update_layout(
    title_font=dict(size=20, family="Arial", color="black"), 
    yaxis_title="Zeit in Minuten",  # Y-axis title
    xaxis=dict(showgrid=True, gridcolor="lightgray"),  
    yaxis=dict(showgrid=True, gridcolor="lightgray"),
    plot_bgcolor="white",  
    yaxis_tickformat = "%H:%M:%S"
)


boxplot_race_time.show() 

```

:::
:::::

```{python}

fig = px.scatter(
    data,
    y="time_minutes",  
    x="Age",  
    color="M/W", 
    title="Zusammenhang zwischen Alter und Zeit",
    color_discrete_map={"M": "#b81212", "W": "#000000"}, 
    trendline="ols"
)

fig.update_layout(
    title_font=dict(size=20, family="Arial", color="black"),  
    yaxis_title="Zeit", 
    xaxis_title="Alter",
    yaxis=dict(
        showgrid=True, gridcolor="lightgray", tickformat="%H:%M:%S"  # Format time
    ),
    xaxis=dict(
        showgrid=True, gridcolor="lightgray"
    ),
    plot_bgcolor="white",  # Background color
)

fig.update_traces(
    opacity = 0.8
)

fig.show()

```

```{python}
from statsmodels.formula.api import ols
from IPython.display import Markdown, display

data.rename(columns={"M/W":"Gender"}, inplace=True)

# Create the regression model including "Gender"
regression_model = ols("time_minutes ~ Age + C(Gender)", data=data)

# Fit the model
regression_model = regression_model.fit()

# Generate the summary as a Markdown string
summary_md = f"""
# Ergebnisse der Regression

## Zusammenfassung
- **Abh√§ngige Variable**: Zeit in Minuten
- **R2**: {regression_model.rsquared:.3f}
- **Adjustiertes R2**: {regression_model.rsquared_adj:.3f}
- **F-Statistik**: {regression_model.fvalue:.1f}
- **P-Wert**: {regression_model.f_pvalue:.3e}
- **Anzahl der Beobachtungen**: {regression_model.nobs:.0f}
- **AIC**: {regression_model.aic:.1f}
- **BIC**: {regression_model.bic:.1f}

## Koeffizeiten
| Variable | Koeffizient | Std. Fehler | t-Wert | p-Wert | Konfidenzintervall |
|----------|-------------|------------|---------|---------|---------------------|
"""

# Using items() method instead of iteritems()
for idx, row in regression_model.params.items():
    conf_int = regression_model.conf_int().loc[idx]
    summary_md += f"| {idx} | {row:.4f} | {regression_model.bse[idx]:.4f} | {regression_model.tvalues[idx]:.2f} | {regression_model.pvalues[idx]:.3e} | [{conf_int[0]:.4f}, {conf_int[1]:.4f}] |\n"

# Display the summary
display(Markdown(summary_md))


```